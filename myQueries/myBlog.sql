--FINAL PROJECT DATABASE
--PROJECT NAME: PERSONAL BLOG

USE master;
GO

IF EXISTS(SELECT * FROM SYS.DATABASES WHERE NAME = 'myBlog')
DROP DATABASE myBlog;
GO

IF EXISTS(SELECT * FROM SYS.DATABASES WHERE NAME = 'myBlog_Archives')
DROP DATABASE myBlog_Archives;
GO

CREATE DATABASE myBlog;
GO

CREATE DATABASE myBlog_Archives;
GO

USE myBlog;
GO

CREATE TABLE Post
(
	POST_ID INT IDENTITY(1,1) PRIMARY KEY, --PK
	TITLE NVARCHAR(255),
	POST_BODY NVARCHAR(MAX),
	P_DATE_TIME DATETIME
);

CREATE TABLE Tags
(
	TAG_ID INT IDENTITY(1,1) PRIMARY KEY, --PK
	TAG_NAME NVARCHAR(255),
);

CREATE TABLE Comments
(
	COMMENT_ID INT IDENTITY(1,1) PRIMARY KEY, --PK
	USERNAME NVARCHAR(255),
	USER_EMAIL NVARCHAR(255),
	COMMENT_BODY NVARCHAR(MAX),
	C_DATE_TIME DATETIME,

	C_POST_ID INT NOT NULL, --FK
	CONSTRAINT FK_POST_ID FOREIGN KEY(C_POST_ID) REFERENCES Post(POST_ID) ON DELETE CASCADE
);

CREATE TABLE PostTags
(

	PT_POST_ID INT NOT NULL, --FK
	PT_TAG_ID INT NOT NULL, --FK

	CONSTRAINT FK_POST_PT_ID FOREIGN KEY(PT_POST_ID) REFERENCES Post(POST_ID) ON DELETE CASCADE,
	CONSTRAINT FK_TAG_PT_ID FOREIGN KEY(PT_TAG_ID) REFERENCES Tags(TAG_ID) ON DELETE CASCADE
);

CREATE TABLE Admins
(
	ADMIN_ID INT IDENTITY(1,1) PRIMARY KEY, --PK
	ADMIN_NAME NVARCHAR(255),
	ADMIN_PASSWORD NVARCHAR(255)
);

--WORK IN PROGRESS, ARCHIVE

SELECT * INTO myBlog_Archives.dbo.Archives FROM Post AS P INNER JOIN Comments AS C 
ON C.C_POST_ID = P.POST_ID INNER JOIN PostTags AS PT
ON P.POST_ID = PT.PT_POST_ID INNER JOIN Tags AS T
ON PT.PT_TAG_ID = T.TAG_ID;

SELECT * FROM myBlog_Archives.dbo.Archives
